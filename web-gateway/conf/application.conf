# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key=${?APPLICATION_SECRET}
play.server.pidfile.path = "/dev/null"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.ApplicationModule"

play.http.filters = "utils.Filters"
play.filters.headers.contentSecurityPolicy = "default-src 'self'; img-src 'self' data: fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.facebook.com *.twitter.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com; font-src 'self' data: fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' clef.io; connect-src 'self' http://localhost:8080 https://localhost:8080 ws://localhost:8080 ws://localhost:9000 *.facebook.com accounts.google.com twitter.com *.xing.com; frame-src clef.io"

# Security Filter Configuration - CORS
# https://stackoverflow.com/questions/45558233/getting-cors-errors-in-scala-play-framework-v2-6-x
play.filters.enabled += play.filters.cors.CORSFilter

play.filters.cors {
#  pathPrefixes = ["/"]
#    allowedOrigins = ["horses.xuloo.cc", "api.horses.xuloo.cc"]
#    allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    #allowedHttpHeaders = "*"
    exposedHeaders = ["Access-Control-Allow-Origin"]
    #preflightMaxAge = 3 days
}
#play.filters.cors {
#  allowedHttpMethods = ["GET", "HEAD", "POST"]
#  allowedHttpHeaders = ["Accept", "Content-Type"]"
#}

# play.filters.enabled += play.filters.csrf.CSRFFilter

#play.filters.csrf.bypassCorsTrustedOrigins = false
# play.filters.csrf.cookie.name="PLAY_CSRF_TOKEN" // We store the CSRF token in a cookie instead of the session so that UI app can read it
#play.filters.csrf.contentType.blackList=[ // We would also check AJAX requests from type application/json
#  "application/x-www-form-urlencoded",
#  "multipart/form-data",
#  "text/plain",
#  "application/json"
#]

lagom.services {
  hello-service = "http://localhost:11000"
  hello-stream-service = "http://localhost:11001"
}

my.executor {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}
